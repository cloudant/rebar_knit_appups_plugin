% Licensed under the Apache License, Version 2.0 (the "License"); you may not
% use this file except in compliance with the License. You may obtain a copy of
% the License at
%
%   http://www.apache.org/licenses/LICENSE-2.0
%
% Unless required by applicable law or agreed to in writing, software
% distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
% WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
% License for the specific language governing permissions and limitations under
% the License.

-module(rebar_knit_appups_plugin).


-export([
    'pre_generate-appup'/2
]).


-include("rebar_knit_appups_plugin.hrl").


'pre_generate-appup'(Config, ReltoolFile) ->
    case rebar_rel_utils:is_rel_dir() of
        {true, _} ->
            generate(Config, ReltoolFile);
        false ->
            {ok, Config}
    end.


generate(Config0, ReltoolFile) ->
    {Config, RTConfig} = rebar_rel_utils:load_config(Config0, ReltoolFile),
    TargetParentDir = rebar_rel_utils:get_target_parent_dir(Config, RTConfig),
    {Name, _Ver} = rebar_rel_utils:get_reltool_release_info(RTConfig),

    OldRelPath0 = rebar_rel_utils:get_previous_release_path(Config),
    OldRelPath = filename:join([TargetParentDir, OldRelPath0]),
    NewRelPath = filename:join([TargetParentDir, Name]),

    ?DEBUG("Old Rel Path: ~s ~s~n", [Name, OldRelPath]),
    {OldName, OldVer} = rebar_rel_utils:get_rel_release_info(Name, OldRelPath),

    ?DEBUG("New Rel Path: ~s ~s~n", [Name, NewRelPath]),
    {NewName, NewVer} = rebar_rel_utils:get_rel_release_info(Name, NewRelPath),

    %% Run some simple checks
    true = rebar_utils:prop_check(NewName == OldName,
            "Mismatched release names.~n", []),
    true = rebar_utils:prop_check(NewVer =/= OldVer,
            "No version change between releases.~n", []),

    ToUpgrade = apps_to_upgrade(Name, OldRelPath, NewRelPath),

    lists:foreach(fun({AppName, OldVsn, NewVsn}) ->
        make_appup(OldRelPath, NewRelPath, AppName, OldVsn, NewVsn)
    end, ToUpgrade),

    ?CONSOLE("Finished generating appups.~n", []),

    {ok, Config}.


apps_to_upgrade(Name, OldVerPath, NewVerPath) ->
    OldApps = rebar_rel_utils:get_rel_apps(Name, OldVerPath),
    NewApps = rebar_rel_utils:get_rel_apps(Name, NewVerPath),

    ?DEBUG("Old Apps: ~p~n", [OldApps]),
    ?DEBUG("New Apps: ~p~n", [NewApps]),

    % An application is considered to be an upgrade if
    % it exists in ToRel with a different version. There
    % isn't any assertion done on version ordering.
    Upgrades = lists:flatmap(fun({AppName, OldVsn}) ->
        case lists:keyfind(AppName, 1, NewApps) of
            {AppName, NewVsn} when NewVsn /= OldVsn ->
                [{AppName, OldVsn, NewVsn}];
            _ ->
                []
        end
    end, OldApps),

    % Log the upgrades we've found
    lists:foreach(fun({AppName, OldVsn, NewVsn}) ->
        ?DEBUG("Upgrading ~s: ~p -> ~p~n", [AppName, OldVsn, NewVsn])
    end, Upgrades),

    Upgrades.


make_appup(OldRelPath, NewRelPath, AppName, OldVsn, NewVsn) ->
    AppupPath = appup_path(NewRelPath, AppName, NewVsn),
    case filelib:is_regular(AppupPath) of
        true ->
            ?INFO("~s.appup exists~n", [AppName]);
        false ->
            Appup = gen_appup(OldRelPath, NewRelPath, AppName, OldVsn, NewVsn),
            ?CONSOLE("Knit generated appup for ~s~n", [AppName]),
            write_appup(AppupPath, Appup)
    end.


gen_appup(OldRelPath, NewRelPath, AppName, OldVsn, NewVsn) ->
    OldEbin = ebin_dir(OldRelPath, AppName, OldVsn),
    NewEbin = ebin_dir(NewRelPath, AppName, NewVsn),

    {Removed0, Added0, Changed0} =
            rebar_knit_beam_lib:cmp_dirs(OldEbin, NewEbin),

    Removed = [{removed, R} || R <- Removed0],
    Added = [{added, A} || A <- Added0],
    Changed = [{changed, C} || C <- Changed0],

    UpFrom = rebar_knit_kmod:render(Removed ++ Added ++ Changed),
    DownTo = [{apply, {erlang, error, [downgrade_not_supported]}}],

    {NewVsn, [{OldVsn, UpFrom}, {OldVsn, DownTo}]}.


write_appup(AppupPath, Appup) ->
    Now = httpd_util:rfc1123_date(erlang:localtime()),
    Header = "%% Generated by rebar_knit_appups_plugin: " ++ Now ++ "\n\n",
    Body = io_lib:print(Appup),
    case file:write_file(AppupPath, Header ++ Body ++ ".\n\n") of
        ok ->
            ok;
        {error, Error} ->
            Reason = file:format_error(Error),
            ?ABORT("Failed to write ~s: ~s", [AppupPath, Reason])
    end.


appup_path(RelPath, AppName, AppVsn) ->
    BaseName = atom_to_list(AppName) ++ ".appup",
    filename:join([ebin_dir(RelPath, AppName, AppVsn), BaseName]).


ebin_dir(RelPath, AppName, AppVsn) ->
    AppDir = atom_to_list(AppName) ++ "-" ++ AppVsn,
    EbinDir = filename:join([RelPath, "lib", AppDir, "ebin"]),
    case filelib:is_dir(EbinDir) of
        true ->
            EbinDir;
        false ->
            ?ABORT("Missing ebin directory: ~s", [EbinDir])
    end.
